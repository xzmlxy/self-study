软件代码架构的目的，是为了把不同的模块区分开来。之所以需要这样的区分，一个很重要的原因是：不同模块会因为不同的原因，以不同的速度被修改或替换。
纵向来看，一个完整的软件可能包含多个子系统。在不同子系统之间共用代码需要格外小心：它们真的会一直保持一致吗？还仅仅是个巧合？
横向来看，每个子系统都可以分为三层：UI层、逻辑层和数据层。
某些系统的逻辑层还可细分为业务逻辑和领域逻辑：比如一个象棋游戏的象棋规则就是领域逻辑，它不太会发生变更；而对弈胜者和负者的积分变化则是业务逻辑，完全可能随版本变化。
除了需要注意模块之间的依赖关系，还要注意模块内部的依赖关系。让实现依赖于抽象，是亘古不变的道理。
