dclass A():
    a = 0

    def __init__(self, test):
        self.b = test

a为类变量而b为成员变量，a可以以A.a的方式使用，而b必须通过实例对象来使用，看上去有点类似于java中静态变量和成员变量，但不同的是，python中类的实例并不会共享a（而是拷贝）！！！所以如果想要共享，那么必须通过类名来使用使用类变量。
另外，Python还具有@staticmethod和@classmethod两种方法的装饰器，带有这两种装饰器的方法，都类似于java中的静态方法，不需要实例化便可使用。不同的是，前者默认不带任何参数，而后者必须带一个cls参数（类对象本身）。后者的作用是，在使用类成员时，避免硬编码。
基于以上特性，为了代码的规范性，一般情况下：（1）类的实例不直接使用类成员。（2）实例的成员方法可使用类成员和实例成员；类方法仅使用类成员，静态方法不使用实例成员或类成员。
