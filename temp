chessboard_string_test = "1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 3"
step = 3
answer = 1.633


class Answer:
    def __init__(self, chessboard, cut):
        self.cut = cut
        if isinstance(chessboard, str):
            self.chessboard = Answer.pretreatment(chessboard)
        else:
            self.chessboard = chessboard

    @staticmethod
    def pretreatment(chessboard_string):
        chessboard_string_list = chessboard_string.split(" ")
        assert len(chessboard_string_list) == 64
        i = 0
        temp = []
        result = []
        for s in chessboard_string_list:
            temp.append(int(s))
            i += 1
            if i == 8:
                result.append(temp)
                temp = []
                i = 0
        return result

    def count_min_variance(self):
        print(self.chessboard)


    def can_merge(self,x1,y1,x2,y2):




Answer1 = Answer(chessboard_string_test, step)
Answer1.count_min_variance()
